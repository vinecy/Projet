/** 
* Polytech Marseille
* Case 925 -163, avenue de Luminy
* 13288 Marseille CEDEX 9
*
* Ce fichier est l'oeuvre d'eleves de Polytech Marseille. Il ne peut être 
* reproduit, utilise ou modifie sans l'avis express de ses auteurs.
*/

/**
* @author DENIS Justine <justine.denis@etu.univ-amu.fr>
*
* @version 0.0.1 / 1-02-2016
* @toto NA
* @bug NA 
*/

/**
* @file essai_1.c
* @brief
*
*  Essai sur le back track pour la base
**/ 


#include <stdio.h>
#include <assert.h>
#include <stdlib.h>             //pour malloc

#define K 2                     //K taille du tetradre
#define rouge 0
#define bleu 1
#define vert 2



/*Declaration de la structure de listes*/
typedef struct maillon_tetra{   
    int nb_bleu;
    int nb_rouge;
    int nb_vert;   
    int tetra[K][K][K];                    
    struct maillon_tetra *suivant;         //Creation pointeur sur prochain maillon
}maillon_tetra;

typedef maillon_tetra *liste;
 
 
/* Declaration des variables globales*/
int compt = 0;              //Compteur
int ligne[K];              //Ligne de back track
int choix;				  //Choix pour min/max 


/*---------------------------------------------------------------------------*/
/*
for(i=0;i<n;i++)
	{

		for(j=0;j<n-i;j++)
		{									////////////Symetrie miroir
			miroir[i][n-1-j-i][n]=niveau[i][j][n];

		}
	}
	///////////////////////////////////////
	for(i=0;i<n;i++)
	{
		printf("\n");
		for(j=0;j<n-i;j++)					////////////Symetrie horaire
		{
			horaire[n-1-i-j][i][n]=niveau[i][j][n];		
		}
	}
*/
/* Renvoit 1 si on a deja enregistré une des symétries, 0 sinon */
int symetrie(liste liste_tetra)
{
	int result;
	int result1=0;
	int result2=0;
	int result3=0;
	int result4=0;
	int result5=0;
	int i,j,k1,l,c,temp;
	int tetra[K][K][K],copie[K][K][K],axe1[K][K][K],axe2[K][K][K];
	for (k1=0; k1<K; k1++){
    		for (l=0; l<=k1; l++) {                      
        		for(c=0; c<=k1-l; c++) {
        	    	tetra[l][c][k1] = liste_tetra->tetra[l][c][k1];
        	    }
        	}
    	} 
    liste_tetra = liste_tetra->suivant; 
	while (liste_tetra != NULL)
	{
		for (k1=0; k1<K; k1++){
    		for (l=0; l<=k1; l++) {                      
        		for(c=0; c<=k1-l; c++) {
        	    	copie[l][c][k1] = liste_tetra->tetra[l][c][k1];
        	    }
        	}
    	}  
///////////////////////////////1ere sym miroir//////////////////////////////////
		for(i=0;i<K;i++)
		{
			for(j=0;j<K-i;j++)
			{
				if(copie[i][K-1-i-j][K-1]!=tetra[i][j][K-1])
				{
					result1=1;
				}
			}
		}
///////////////////////////////1ere modif copie/////////////////////////////////
	for(i=0;i<K;i++)
	{
		printf("\n");
		for(j=0;j<K-i;j++)					
		{
			axe1[K-1-i-j][i][K-1]=copie[i][j][K-1];		
		}
	}
///////////////////////////////1ere sym axiale//////////////////////////////////
	for(i=0;i<K;i++)
		{
			for(j=0;j<K-i;j++)
			{
				if(axe1[i][K-1-i-j][K-1]!=tetra[i][j][K-1])
				{
					result2=1;
				}
			}
		}
///////////////////////////////2ere sym miroir//////////////////////////////////
		for(i=0;i<K;i++)
		{
			for(j=0;j<K-i;j++)
			{
				if(axe1[i][K-1-i-j][K-1]!=tetra[i][j][K-1])
				{
					result3=1;
				}
			}
		}
///////////////////////////////2ere modif copie/////////////////////////////////
	for(i=0;i<K;i++)
	{
		printf("\n");
		for(j=0;j<K-i;j++)					
		{
			axe2[K-1-i-j][i][K-1]=axe1[i][j][K-1];		
		}
	}
///////////////////////////////2ere sym axiale//////////////////////////////////
	for(i=0;i<K;i++)
		{
			for(j=0;j<K-i;j++)
			{
				if(axe2[i][K-1-i-j][K-1]!=tetra[i][j][K-1])
				{
					result4=1;
				}
			}
		}
///////////////////////////////3ere sym miroir//////////////////////////////////
		for(i=0;i<K;i++)
		{
			for(j=0;j<K-i;j++)
			{
				if(axe2[i][K-1-i-j][K-1]!=tetra[i][j][K-1])
				{
					result4=1;
				}
			}
		}
		liste_tetra = liste_tetra->suivant;
	}
	if((result1==1)&&(result2==1)&&(result3==1)&&(result4==1)&&(result5==1))
	{
		result=0;
	}else{
		result=1;
	}
	return(result);
}
/*---------------------------------------------------------------------------*/

/* Enregistrement des tetraedre dans la liste*/
liste ajout_liste (int tetra[][K][K], liste liste_tetra,int nb_rouge, int nb_bleu, int nb_vert){
    if (liste_tetra == NULL){
        liste tmp;
        int k1, c, l, i, j, k;
    
        tmp = (maillon_tetra*)malloc(sizeof(maillon_tetra)); 
        for (k1=0; k1<K; k1++){
            for (l=0; l<=k1; l++) {                      
               for(c=0; c<=k1-l; c++) {
                    tmp->tetra[l][c][k1] = tetra[l][c][k1];
                }
            }
        }      
         
        tmp->nb_rouge = nb_rouge;  
        tmp->nb_bleu = nb_bleu;  
        tmp->nb_vert = nb_vert;                           
        tmp->suivant = liste_tetra;                  //pointeur sur le champs suivant
        liste_tetra = tmp;  

        return (liste_tetra);
            
        }else{
        int k1, l,c, i, j,k ;

        maillon_tetra* ptr;
        ptr = (maillon_tetra*)malloc(sizeof(maillon_tetra));       //Cree pointeur sur 1 maillon
        for (k1=0; k1<K; k1++){
            for (l=0; l<=k1; l++) {                      
               for(c=0; c<=k1-l; c++) {
                    ptr->tetra[l][c][k1] = tetra[l][c][k1];
                }
            }
        }  
        ptr->nb_rouge = nb_rouge;  
        ptr->nb_bleu = nb_bleu;  
        ptr->nb_vert = nb_vert;                           
        ptr->suivant = liste_tetra;        
        
        for(k1=K-1; k1>=0; k1--){
        	for (l=0; l<=k1; l++) {              
        	printf("\n");            
               for(c=0; c<=k1-l; c++) {
                    printf("%i ",liste_tetra->tetra[l][c][k1]);
                }
            }
            printf("\n");
        }         
        return (ptr); 
    }
}

/*------------------------------------------------------------------*/ 
/* Fonction de trie*/
liste trie_rouge (liste liste_tetra, int nb_rouge, int nb_bleu, int nb_vert){
    liste copie;
    copie = NULL;
    // Choix min rouge
    while (liste_tetra != NULL)
    {
        if ((nb_rouge <= liste_tetra->nb_rouge) && (symetrie(liste_tetra)))
        {
        copie=ajout_liste (liste_tetra->tetra, copie, liste_tetra->nb_rouge, liste_tetra->nb_bleu, liste_tetra->nb_vert);
        } 
        liste_tetra = liste_tetra->suivant;
    }
    
    return(copie);
}

liste trie_bleu (liste liste_tetra, int nb_rouge, int nb_bleu, int nb_vert){
    liste copie;
    copie = NULL;
    // Choix max bleu
    while (liste_tetra != NULL)
    {
        if ((nb_bleu >= liste_tetra->nb_bleu) && (symetrie(liste_tetra)))
        {
        copie=ajout_liste (liste_tetra->tetra, copie, liste_tetra->nb_rouge, liste_tetra->nb_bleu, liste_tetra->nb_vert);
        } 
        liste_tetra = liste_tetra->suivant;
    }
    
    return(copie);
}

liste trie_vert (liste liste_tetra, int nb_rouge, int nb_bleu, int nb_vert){
    liste copie;
    copie = NULL;
    // Choix max vert
    while (liste_tetra != NULL)
    {
        if ((nb_vert >= liste_tetra->nb_vert) && (symetrie(liste_tetra)))
        {
        copie=ajout_liste (liste_tetra->tetra, copie, liste_tetra->nb_rouge, liste_tetra->nb_bleu, liste_tetra->nb_vert);
        } 
        liste_tetra = liste_tetra->suivant;
    }
    
    return(copie);
}

liste trie_minmaxbleu (liste liste_tetra, int nb_rouge, int nb_bleu, int nb_vert){
    liste copie;
    copie = NULL;
    // Choix rouge et bleu
    while (liste_tetra != NULL)
    {
        if (((nb_rouge <= liste_tetra->nb_rouge) && (nb_bleu>=liste_tetra->nb_bleu)) && (symetrie(liste_tetra)))
        {
        copie=ajout_liste (liste_tetra->tetra, copie, liste_tetra->nb_rouge, liste_tetra->nb_bleu, liste_tetra->nb_vert);
        } 
        liste_tetra = liste_tetra->suivant;
    }
    
    return(copie);
}

liste trie_minmaxvert (liste liste_tetra, int nb_rouge, int nb_bleu, int nb_vert){
    liste copie;
    copie = NULL;
    // Choix rouge et vert
    while (liste_tetra != NULL)
    {
        if (((nb_rouge <= liste_tetra->nb_rouge) && (nb_vert>=liste_tetra->nb_vert)) && (symetrie(liste_tetra)))
        {
        copie=ajout_liste (liste_tetra->tetra, copie, liste_tetra->nb_rouge, liste_tetra->nb_bleu, liste_tetra->nb_vert);
        } 
        liste_tetra = liste_tetra->suivant;
    }
    
    return(copie);
}


 
 /*-------------------------------------------------------------------*/
/*Fonction back_track de base */
void back_track_base (int i, int fin_boucle){
    int j, l, m, c, tetra[K][K][K], valeur, k1;
    liste liste_tetra;
    int nb_rouge, nb_vert, nb_bleu;
    int min_rouge, max_bleu, max_vert;
    liste_tetra = NULL;
    nb_rouge=0;
    nb_bleu=0;
    nb_vert=0;
    
    min_rouge = fin_boucle;
    max_bleu = 0;
    max_vert = 0;

       
	 
    if (i == fin_boucle)
    	{  	
    	
    	//Fonction passage ligne en triangle
    	valeur = 0;
    	for(l=0; l<K; l++){     //Ligne 
    	    for(c=0; c<K-l; c++){
    	        tetra[l][c][K-1] = ligne[valeur];
    	        valeur = valeur+1;
    	    }
    	}
    	
    	
    	
    	//comptage des boules de la base
    	for (l=0; l<=K-1; l++) 
    	{                         
   			for(c=0; c<=K-1-l; c++) 
   			{
				if(tetra[l][c][K-1]==0)
				{
					nb_rouge++;
				}else if(tetra[l][c][K-1]==1)
				{
					nb_bleu++;
				}else
				{
					nb_vert++;
				}
       	 	}
   		 }
    	
    	
    	
    	
    	//Calcul des niveaux inferieurs:
    	 for(k1=K-2; k1>=0; k1--)                   //niveaux
        {
            for (l=k1; l>=0; l--)                  //lignes
            {                  
                for(c=0; c<=k1-l; c++)                //colonnes  
                {
                    //Si les 3 boules identiques-->rouge
                    if((tetra[l][c][k1+1] == tetra[l][c+1][k1+1]) 
                    && (tetra[l][c+1][k1+1] ==  tetra[l+1][c][k1+1]))
                    {
                        tetra[l][c][k1] = rouge;
                        nb_rouge++;
                    
                    //Si les 3 boules differentes -->vert    
                    }else if((tetra[l][c][k1+1] != tetra[l][c+1][k1+1]) 
                    && (tetra[l][c+1][k1+1] !=  tetra[l+1][c][k1+1])
                    && (tetra[l][c][k1+1] != tetra[l+1][c][k1+1]))
                    {
                        tetra[l][c][k1] = vert;
                        nb_vert++;
                    
                    //Si 2 boules identiques-->bleu    
                    }else{
                        tetra[l][c][k1] = bleu;
                        nb_bleu++;
                    }
                }
            }
        }
        
        // Calcule du minimum de rouge:
        if ((nb_rouge <= min_rouge ) && (choix==1))
       	{
           min_rouge = nb_rouge;  
           liste_tetra=ajout_liste (tetra,liste_tetra,nb_rouge,nb_bleu,nb_vert);
           liste_tetra = trie_rouge (liste_tetra,nb_rouge,nb_bleu,nb_vert);
        }
        
        if ((nb_bleu >= max_bleu ) && (choix==2))
       	{
           max_bleu = nb_bleu;         
           liste_tetra=ajout_liste (tetra,liste_tetra,nb_rouge,nb_bleu,nb_vert);
           liste_tetra = trie_bleu (liste_tetra,nb_rouge,nb_bleu,nb_vert);
        }
        
        if ((nb_vert >= max_vert ) && (choix==3))
       	{
           max_vert = nb_vert;          
           liste_tetra=ajout_liste (tetra,liste_tetra,nb_rouge,nb_bleu,nb_vert);
           liste_tetra = trie_vert (liste_tetra,nb_rouge,nb_bleu,nb_vert);            
        }
        
        if ((((nb_rouge <= min_rouge ) && (max_vert <= nb_vert))) && (choix==4))
        {
           min_rouge = nb_rouge;
           max_vert = nb_vert;        
           liste_tetra=ajout_liste (tetra,liste_tetra,nb_rouge,nb_bleu,nb_vert);
           liste_tetra = trie_minmaxvert (liste_tetra,nb_rouge,nb_bleu,nb_vert);            
        }
        
         if ((((nb_rouge <= min_rouge ) && (max_vert <= nb_bleu))) && (choix==5))
        {
           min_rouge = nb_rouge;
           max_bleu = nb_bleu;           
           liste_tetra=ajout_liste (tetra,liste_tetra,nb_rouge,nb_bleu,nb_vert);
           liste_tetra = trie_minmaxbleu (liste_tetra,nb_rouge,nb_bleu,nb_vert);            
        }
        
        
       
    	
    	
    	//Afficher les solutions
    	/*printf("\nTetra %i",compt);
    	for(k1=K-1; k1>=0; k1--){
        	for (l=0; l<=k1; l++) {              
        	printf("\n");            
               for(c=0; c<=k1-l; c++) {
                    printf("%i ",tetra[l][c][k1]);
                }
            }
            printf("\n");
        }*/
       
        compt ++;
        
        
    }else{
                ligne[i] = 0;       
				back_track_base (i+1, fin_boucle);
                ligne[i] = 1;        
				back_track_base (i+1, fin_boucle);
                ligne[i] = 2;                     
				back_track_base (i+1, fin_boucle);
    }
} 
 












 
 
 
 /*Main*/
 int main (void){
    int fin_boucle, h;
    
    printf("\n");
    printf("	Entrez un nombre =\n");
    printf("	0 pour quitter le programme\n");
    printf("	1 pour min rouge\n");
    printf("	2 pour max bleu\n");
    printf("	3 pour max vert\n");
    printf("	4 pour min rouge et max bleu\n");
    printf("	5 pour min rouge et max vert\n");
    scanf("%i",&choix);

    if((choix<0)||(choix>5))
    {
    	printf("ERREUR\n");
    	return(1);
    }
    if(choix==0)
    {
    	return(0);
    }
    
    //Calcul de la fin de la boucle
	for (h=1;h<=K;h++)
	{
		fin_boucle = fin_boucle+h;
	}	
	
   	back_track_base(0,fin_boucle);     //appel de la fonction backtrack
   	
    printf("Il ya %i solutions \n",compt);    
    
} 
